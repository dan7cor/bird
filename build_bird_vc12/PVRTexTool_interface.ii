# 1 "e:/7.10/extensions/pvrtextool/interface/PVRTexTool_interface.cpp"
# 1 "C:\\Users\\Daniel\\Documents\\Bird\\build_bird_vc12//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "c:/Users/Daniel/Documents/Bird/build_bird_vc12/temp_defines_debug.h" 1
# 1 "<command-line>" 2
# 1 "e:/7.10/extensions/pvrtextool/interface/PVRTexTool_interface.cpp"





# 1 "e:/7.10/s3e/h/s3eExt.h" 1
# 15 "e:/7.10/s3e/h/s3eExt.h"
# 1 "e:/7.10/s3e/h/s3eTypes.h" 1
# 35 "e:/7.10/s3e/h/s3eTypes.h"
typedef unsigned char s3e_uint8_t;
typedef signed char s3e_int8_t;
typedef unsigned short int s3e_uint16_t;
typedef signed short int s3e_int16_t;
typedef unsigned int s3e_uint32_t;
typedef signed int s3e_int32_t;
# 55 "e:/7.10/s3e/h/s3eTypes.h"
        typedef unsigned long long s3e_uint64_t;
        typedef signed long long s3e_int64_t;







typedef unsigned long s3e_size_t;
typedef signed long s3e_ssize_t;
# 85 "e:/7.10/s3e/h/s3eTypes.h"
typedef s3e_uint64_t uint64_t;
typedef s3e_int64_t int64_t;
typedef s3e_uint32_t uint32_t;
typedef s3e_int32_t int32_t;
typedef s3e_uint16_t uint16_t;
typedef s3e_int16_t int16_t;
typedef s3e_uint8_t uint8_t;
typedef s3e_int8_t int8_t;
# 104 "e:/7.10/s3e/h/s3eTypes.h"
    typedef long int intptr_t;
    typedef unsigned long int uintptr_t;
# 153 "e:/7.10/s3e/h/s3eTypes.h"
typedef unsigned int uint;
typedef unsigned short int ushort;
typedef unsigned long int ulong;
typedef unsigned char uint8;
typedef signed char int8;


typedef int64_t int64;
typedef uint64_t uint64;




typedef unsigned int uint32;






typedef signed int int32;






typedef uint16_t uint16;




typedef int16_t int16;
# 266 "e:/7.10/s3e/h/s3eTypes.h"
typedef enum s3eResult
{
    S3E_RESULT_SUCCESS = 0,
    S3E_RESULT_ERROR = 1
} s3eResult;




typedef uint8 s3eBool;
# 284 "e:/7.10/s3e/h/s3eTypes.h"
typedef wchar_t s3eWChar;
# 296 "e:/7.10/s3e/h/s3eTypes.h"
typedef int32 (*s3eCallback) (void* systemData, void* userData);
# 16 "e:/7.10/s3e/h/s3eExt.h" 2
# 1 "e:/7.10/s3e/h/s3eDebug.h" 1
# 58 "e:/7.10/s3e/h/s3eDebug.h"
typedef enum s3eDebugProperty
{



    S3E_DEBUG_TRACE_ENABLED = 0,





    S3E_DEBUG_TRACE_TO_FILE = 1,




    S3E_DEBUG_ASSERT_ENABLED = 2,





    S3E_DEBUG_AVAILABLE = 3,




    S3E_DEBUG_FONT_SCALE = 4,




    S3E_DEBUG_FONT_WIDTH = 5,




    S3E_DEBUG_FONT_HEIGHT = 6

} s3eDebugProperty;
# 115 "e:/7.10/s3e/h/s3eDebug.h"
extern "C" int32 s3eDebugGetInt(s3eDebugProperty property);
# 133 "e:/7.10/s3e/h/s3eDebug.h"
extern "C" s3eResult s3eDebugSetInt(s3eDebugProperty property, int32 value);







typedef enum s3eDebugCallback
{
# 157 "e:/7.10/s3e/h/s3eDebug.h"
    S3E_DEBUG_ASSERT = 0,
# 172 "e:/7.10/s3e/h/s3eDebug.h"
    S3E_DEBUG_ERROR = 1,

    S3E_DEBUG_CALLBACK_MAX
} s3eDebugCallback;
# 200 "e:/7.10/s3e/h/s3eDebug.h"
extern "C" s3eResult s3eDebugRegister(s3eDebugCallback cbid, s3eCallback fn, void* userData);
# 217 "e:/7.10/s3e/h/s3eDebug.h"
extern "C" s3eResult s3eDebugUnRegister(s3eDebugCallback cbid, s3eCallback fn);
# 226 "e:/7.10/s3e/h/s3eDebug.h"
typedef enum s3eDebugError
{
    S3E_DEBUG_ERR_NONE = 0,
    S3E_DEBUG_ERR_PARAM = 1,
    S3E_DEBUG_ERR_TOO_MANY = 2,
    S3E_DEBUG_ERR_ALREADY_REG = 3,
    S3E_DEBUG_ERR_NOT_FOUND = 4
} s3eDebugError;
# 246 "e:/7.10/s3e/h/s3eDebug.h"
extern "C" s3eDebugError s3eDebugGetError();
# 259 "e:/7.10/s3e/h/s3eDebug.h"
extern "C" const char* s3eDebugGetErrorString();

typedef enum s3eErrorShowResult
{

    S3E_ERROR_SHOW_CONTINUE = 0,

    S3E_ERROR_SHOW_STOP = 1,

    S3E_ERROR_SHOW_IGNORE = 2,





    S3E_ERROR_SHOW_AGAIN = 3
} s3eErrorShowResult;




typedef enum s3eMessageType
{





    S3E_MESSAGE_CONTINUE = 0,





    S3E_MESSAGE_CONTINUE_STOP = 1,






    S3E_MESSAGE_CONTINUE_STOP_IGNORE = 2
} s3eMessageType;







extern "C" s3eBool s3eDebugIsDebuggerPresent();
# 325 "e:/7.10/s3e/h/s3eDebug.h"
extern "C" void s3eDebugOutputString(const char* pStr);
# 337 "e:/7.10/s3e/h/s3eDebug.h"
extern "C" s3eErrorShowResult s3eDebugErrorShow(s3eMessageType type, const char* string);






extern "C" s3eErrorShowResult s3eDebugErrorPrintf(const char* fmt, ...)

__attribute__((format(printf, 1, 2)))

;
# 362 "e:/7.10/s3e/h/s3eDebug.h"
extern "C" s3eErrorShowResult s3eDebugAssertShow(s3eMessageType type, const char* string);
# 375 "e:/7.10/s3e/h/s3eDebug.h"
extern "C" void s3eDebugTraceLine(const char* string);






extern "C" int s3eDebugTracePrintf(const char* fmt, ...)

__attribute__((format(printf, 1, 2)))

;






extern "C" void s3eDebugTraceClearFile();
# 402 "e:/7.10/s3e/h/s3eDebug.h"
extern "C" void s3eDebugTraceFlush();
# 427 "e:/7.10/s3e/h/s3eDebug.h"
extern "C" void s3eDebugPrint(int x, int y, const char* string, s3eBool wrap);






extern "C" void s3eDebugPrintf(int x, int y, s3eBool wrap, const char* fmt, ...)

__attribute__((format(printf, 4, 5)))

;







extern "C" s3eBool s3eDebugTraceChannelSwitch(const char* channel, s3eBool new_state);
# 17 "e:/7.10/s3e/h/s3eExt.h" 2
# 44 "e:/7.10/s3e/h/s3eExt.h"
typedef enum s3eExtError
{
    S3E_EXT_ERR_NONE = 0,
    S3E_EXT_ERR_PARAM = 1,
    S3E_EXT_ERR_NOT_FOUND = 4
} s3eExtError;
# 62 "e:/7.10/s3e/h/s3eExt.h"
extern "C" s3eExtError s3eExtGetError();
# 76 "e:/7.10/s3e/h/s3eExt.h"
extern "C" const char* s3eExtGetErrorString();
# 109 "e:/7.10/s3e/h/s3eExt.h"
extern "C" s3eResult s3eExtGet(const char* extension, void* functions, uint32 functionsLen);
# 119 "e:/7.10/s3e/h/s3eExt.h"
extern "C" s3eResult s3eExtGetHash(uint32 hash, void* functions, uint32 functionsLen);

static inline s3eBool s3eExtAvailable(const char* extension, int32 len =0)
{
    if (s3eExtGet(extension, __null, len) == S3E_RESULT_SUCCESS)
        return (1);
    else
        return (0);
}
# 7 "e:/7.10/extensions/pvrtextool/interface/PVRTexTool_interface.cpp" 2
# 1 "e:/7.10/modules/iwutil/h/IwDebug.h" 1
# 15 "e:/7.10/modules/iwutil/h/IwDebug.h"
# 1 "e:/7.10/s3e/h/s3eTypes.h" 1
# 16 "e:/7.10/modules/iwutil/h/IwDebug.h" 2
# 1 "e:/7.10/s3e/h/s3eDebug.h" 1
# 17 "e:/7.10/modules/iwutil/h/IwDebug.h" 2
# 1 "e:/7.10/s3e/h/s3eDevice.h" 1
# 59 "e:/7.10/s3e/h/s3eDevice.h"
typedef enum s3eDeviceError
{
    S3E_DEVICE_ERR_NONE = 0,
    S3E_DEVICE_ERR_PARAM = 1,
    S3E_DEVICE_ERR_TOO_MANY = 2,
    S3E_DEVICE_ERR_ALREADY_REG = 3,
    S3E_DEVICE_ERR_NOT_FOUND = 4,
    S3E_DEVICE_ERR_UNAVAIL = 5,
    S3E_DEVICE_ERR_DEVICE = 6,
    S3E_DEVICE_ERR_UNSUPPORTED = 7,
    S3E_DEVICE_ERR_MEM = 8,
    S3E_DEVICE_ERR_GENERIC = 9,
    S3E_DEVICE_ERR_INVALID_DRIVE = 10,
    S3E_DEVICE_ERR_INVALID_PATH = 11
} s3eDeviceError;
# 86 "e:/7.10/s3e/h/s3eDevice.h"
extern "C" s3eDeviceError s3eDeviceGetError();
# 100 "e:/7.10/s3e/h/s3eDevice.h"
extern "C" const char* s3eDeviceGetErrorString();
# 109 "e:/7.10/s3e/h/s3eDevice.h"
typedef enum s3eDeviceFPUType
{
    S3E_DEVICE_FPU_NONE = 0,
    S3E_DEVICE_FPU_VFP = 1,
    S3E_DEVICE_FPU_VFPV3 = 2,
    S3E_DEVICE_FPU_NEON = 3
} s3eDeviceFPUType;






typedef enum s3eDeviceProperty
{







    S3E_DEVICE_OS = 0,





    S3E_DEVICE_CLASS = 1,
# 160 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_ID = 2,
# 183 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_PHONE_NUMBER = 3,
# 192 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_LANGUAGE = 4,






    S3E_DEVICE_STATE = 5,




    S3E_DEVICE_FREE_RAM = 6,




    S3E_DEVICE_TOTAL_RAM = 7,
# 226 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_ARCHITECTURE = 8,
# 236 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_S3E_VERSION = 9,
# 248 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_BATTERY_LEVEL = 10,
# 258 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_LEFT_SOFTKEY_IS_BACK = 11,
# 271 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_MAINS_POWER = 12,
# 283 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_OS_VERSION = 13,
# 304 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_CHIPSET = 14,
# 313 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_EXIT_CODE = 15,
# 334 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_FPU = 16,





    S3E_DEVICE_BACK_SOFTKEY_POSITION = 17,





    S3E_DEVICE_ADVANCE_SOFTKEY_POSITION = 18,
# 357 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_SDK_VERSION = 19,
# 366 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_LOCALE = 20,
# 375 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_NAME = 21,







    S3E_DEVICE_SUPPORTS_SIGNAL_HANDLING = 22,







    S3E_DEVICE_EXIT_SIGNAL = 23,
# 414 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_PROXIMITY = 24,
# 454 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_UNIQUE_ID = 25,
# 480 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_IMSI = 26,
# 501 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_SILENT_MODE = 27,




    S3E_DEVICE_NUM_CPU_CORES = 28,
# 522 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_MEM_TOTAL = 29,
# 549 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_MEM_FREE = 30,





    S3E_DEVICE_TIMEZONE = 31,
# 576 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_3D_MODE = 32,
# 589 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_PROCESS_ID = 33,





    S3E_DEVICE_SUPPORTS_SUSPEND_RESUME = 34,





    S3E_DEVICE_DX_FEATURE_LEVEL = 35,




    S3E_DEVICE_TIMEZONE_STD = 36,




    S3E_DEVICE_TIMEZONE_DST = 37,
# 621 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_RUNTIME = 38,
# 635 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_PPI = 39,
# 657 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_PPI_LOGICAL = 40,
} s3eDeviceProperty;






typedef enum s3eDeviceLicPlatID
{
    S3E_LICPLAT_ID_NONE = 0x0000,


    S3E_LICPLAT_ID_WINDOWS = 0x0001,

    S3E_LICPLAT_LINUX = 0x0002,

    S3E_LICPLAT_OSX = 0x0004,


    S3E_LICPLAT_IPHONE = 0x0008,

    S3E_LICPLAT_ANDROID = 0x0010,

    S3E_LICPLAT_QNX = 0x0020,

    S3E_LICPLAT_ROKU = 0x0040,

    S3E_LICPLAT_WP8 = 0x0080,

    S3E_LICPLAT_TIZEN = 0x0100,

    S3E_LICPLAT_WS8 = 0x0200,

    S3E_LICPLAT_LG = 0x0400,

    S3E_LICPLAT_NACL = 0x0800,

    S3E_LICPLAT_WIN10 = 0x1000,

    S3E_LICPLAT_UNSET = 0x10000000,
    S3E_LICPLAT_ALL = 0x7FFFFFFF
} s3eDeviceLicPlatID;
# 709 "e:/7.10/s3e/h/s3eDevice.h"
typedef enum s3eDeviceOSID
{
    S3E_OS_ID_NONE = 0,

    S3E_OS_ID_LG = 1,

    S3E_OS_ID_WINDOWS = 3,

    S3E_OS_ID_LINUX = 5,

    S3E_OS_ID_ARM_SEMIH = 8,

    S3E_OS_ID_OSX = 13,

    S3E_OS_ID_IPHONE = 14,

    S3E_OS_ID_ANDROID = 18,

    S3E_OS_ID_QNX = 23,

    S3E_OS_ID_ROKU = 24,

    S3E_OS_ID_WP8 = 25,

    S3E_OS_ID_TIZEN = 26,

    S3E_OS_ID_WS8 = 27,

    S3E_OS_ID_WS81 = 28,

    S3E_OS_ID_WP81 = 29,

    S3E_OS_ID_NACL = 30,

    S3E_OS_ID_WIN10 = 31,

    S3E_OS_ID_LAST = 32,






    S3E_OS_ID_BREW = 2,

    S3E_OS_ID_WINMOBILE = 4,

    S3E_OS_ID_WIPI = 6,

    S3E_OS_ID_NDS = 7,

    S3E_OS_ID_NUCLEUS = 9,

    S3E_OS_ID_NGI = 10,

    S3E_OS_ID_WINCE = 11,

    S3E_OS_ID_SHARPEMP = 12,

    S3E_OS_ID_UIQ = 15,

    S3E_OS_ID_PS3 = 16,

    S3E_OS_ID_X360 = 17,

    S3E_OS_ID_WEBOS = 19,

    S3E_OS_ID_PSP = 20,

    S3E_OS_ID_WII = 21,

    S3E_OS_ID_MEEGO = 22,

} s3eDeviceOSID;






typedef enum s3eDeviceClassID
{
    S3E_DEVICE_CLASS_UNKNOWN = 0,

    S3E_DEVICE_CLASS_WINDOWS_GENERIC = 3000,
    S3E_DEVICE_CLASS_WINDOWS_PHONE = 3010,
    S3E_DEVICE_CLASS_WINDOWS_STORE = 3020,
    S3E_DEVICE_CLASS_LINUX_GENERIC = 5000,
    S3E_DEVICE_CLASS_LINUX_DESKTOP = 5001,
    S3E_DEVICE_CLASS_LINUX_EMBED = 5002,
    S3E_DEVICE_CLASS_ARM_SEMIH_GENERIC = 8000,
    S3E_DEVICE_CLASS_OSX_DESKTOP = 11000,
    S3E_DEVICE_CLASS_IPHONE = 12000,
    S3E_DEVICE_CLASS_ANDROID_GENERIC = 16000,
    S3E_DEVICE_CLASS_QNX = 19000,
    S3E_DEVICE_CLASS_TIZEN_GENERIC = 20000,
    S3E_DEVICE_CLASS_NACL = 21000,

    S3E_DEVICE_CLASS_SYMBIAN_GENERIC = 1000,
    S3E_DEVICE_CLASS_SYMBIAN_SERIES60 = 1001,
    S3E_DEVICE_CLASS_SYMBIAN_SERIES60_EMULATOR = 1002,
    S3E_DEVICE_CLASS_SYMBIAN_UIQ = 1003,
    S3E_DEVICE_CLASS_SYMBIAN_UIQ_EMULATOR = 1004,
    S3E_DEVICE_CLASS_BREW_GENERIC = 2000,
    S3E_DEVICE_CLASS_BREW_QCIF_3G = 2001,
    S3E_DEVICE_CLASS_BREW_QCIF_25G = 2002,
    S3E_DEVICE_CLASS_BREW_SQCIF_25G = 2003,
    S3E_DEVICE_CLASS_BREW_QVGA_3G = 2004,
    S3E_DEVICE_CLASS_WINCE_GENERIC = 4000,
    S3E_DEVICE_CLASS_WINMOBILE_SP = 4001,
    S3E_DEVICE_CLASS_WINMOBILE_PPC = 4002,
    S3E_DEVICE_CLASS_WIPI_GENERIC = 6000,
    S3E_DEVICE_CLASS_NDS_GENERIC = 7000,
    S3E_DEVICE_CLASS_NDS_NDSI = 7001,
    S3E_DEVICE_CLASS_NUCLEUS_GENERIC = 9000,
    S3E_DEVICE_CLASS_NGI_GENERIC = 10000,
    S3E_DEVICE_CLASS_PS3 = 13000,
    S3E_DEVICE_CLASS_X360 = 14000,
    S3E_DEVICE_CLASS_BADA_GENERIC = 15000,
    S3E_DEVICE_CLASS_PSP = 17000,
    S3E_DEVICE_CLASS_WII = 18000

} s3eDeviceClassID;






typedef enum s3eDeviceRuntimeID
{
    S3E_DEVICE_RUNTIME_UNKNOWN = 0,
    S3E_DEVICE_RUNTIME_DALVIK = 1,
    S3E_DEVICE_RUNTIME_ART = 2,

    S3E_DEVICE_RUNTIME_WINDOWS_PHONE = 3,
    S3E_DEVICE_RUNTIME_WINDOWS = 4,

} s3eDeviceRuntimeID;




typedef enum s3eDeviceLanguage
{
    S3E_DEVICE_LANGUAGE_UNKNOWN = 0,
    S3E_DEVICE_LANGUAGE_ENGLISH = 1,
    S3E_DEVICE_LANGUAGE_FRENCH = 2,
    S3E_DEVICE_LANGUAGE_GERMAN = 3,
    S3E_DEVICE_LANGUAGE_SPANISH = 4,
    S3E_DEVICE_LANGUAGE_ITALIAN = 5,
    S3E_DEVICE_LANGUAGE_PORTUGUESE = 6,
    S3E_DEVICE_LANGUAGE_DUTCH = 7,
    S3E_DEVICE_LANGUAGE_TURKISH = 8,
    S3E_DEVICE_LANGUAGE_CROATIAN = 9,
    S3E_DEVICE_LANGUAGE_CZECH = 10,
    S3E_DEVICE_LANGUAGE_DANISH = 11,
    S3E_DEVICE_LANGUAGE_FINNISH = 12,
    S3E_DEVICE_LANGUAGE_HUNGARIAN = 13,
    S3E_DEVICE_LANGUAGE_NORWEGIAN = 14,
    S3E_DEVICE_LANGUAGE_POLISH = 15,
    S3E_DEVICE_LANGUAGE_RUSSIAN = 16,
    S3E_DEVICE_LANGUAGE_SERBIAN = 17,
    S3E_DEVICE_LANGUAGE_SLOVAK = 18,
    S3E_DEVICE_LANGUAGE_SLOVENIAN = 19,
    S3E_DEVICE_LANGUAGE_SWEDISH = 20,
    S3E_DEVICE_LANGUAGE_UKRAINIAN = 21,
    S3E_DEVICE_LANGUAGE_GREEK = 22,
    S3E_DEVICE_LANGUAGE_JAPANESE = 23,
    S3E_DEVICE_LANGUAGE_SIMPL_CHINESE = 24,
    S3E_DEVICE_LANGUAGE_TRAD_CHINESE = 25,
    S3E_DEVICE_LANGUAGE_KOREAN = 26,
    S3E_DEVICE_LANGUAGE_ICELANDIC = 27,
    S3E_DEVICE_LANGUAGE_FLEMISH = 28,
    S3E_DEVICE_LANGUAGE_THAI = 29,
    S3E_DEVICE_LANGUAGE_AFRIKAANS = 30,
    S3E_DEVICE_LANGUAGE_ALBANIAN = 31,
    S3E_DEVICE_LANGUAGE_AMHARIC = 32,
    S3E_DEVICE_LANGUAGE_ARABIC = 33,
    S3E_DEVICE_LANGUAGE_ARMENIAN = 34,
    S3E_DEVICE_LANGUAGE_AZERBAIJANI = 35,
    S3E_DEVICE_LANGUAGE_TAGALOG = 36,
    S3E_DEVICE_LANGUAGE_BELARUSSIAN = 37,
    S3E_DEVICE_LANGUAGE_BENGALI = 38,
    S3E_DEVICE_LANGUAGE_BULGARIAN = 39,
    S3E_DEVICE_LANGUAGE_BURMESE = 40,
    S3E_DEVICE_LANGUAGE_CATALAN = 41,
    S3E_DEVICE_LANGUAGE_ESTONIAN = 42,
    S3E_DEVICE_LANGUAGE_FARSI = 43,
    S3E_DEVICE_LANGUAGE_GAELIC = 44,
    S3E_DEVICE_LANGUAGE_GEORGIAN = 45,
    S3E_DEVICE_LANGUAGE_GUJARATI = 46,
    S3E_DEVICE_LANGUAGE_HEBREW = 47,
    S3E_DEVICE_LANGUAGE_HINDI = 48,
    S3E_DEVICE_LANGUAGE_INDONESIAN = 49,
    S3E_DEVICE_LANGUAGE_IRISH = 50,
    S3E_DEVICE_LANGUAGE_KANNADA = 51,
    S3E_DEVICE_LANGUAGE_KAZAKH = 52,
    S3E_DEVICE_LANGUAGE_KHMER = 53,
    S3E_DEVICE_LANGUAGE_LAO = 54,
    S3E_DEVICE_LANGUAGE_LATVIAN = 55,
    S3E_DEVICE_LANGUAGE_LITHUANIAN = 56,
    S3E_DEVICE_LANGUAGE_MACEDONIAN = 57,
    S3E_DEVICE_LANGUAGE_MALAY = 58,
    S3E_DEVICE_LANGUAGE_MALAYALAM = 59,
    S3E_DEVICE_LANGUAGE_MARATHI = 60,
    S3E_DEVICE_LANGUAGE_MOLDOVIAN = 61,
    S3E_DEVICE_LANGUAGE_MONGOLIAN = 62,
    S3E_DEVICE_LANGUAGE_PUNJABI = 63,
    S3E_DEVICE_LANGUAGE_ROMANIAN = 64,
    S3E_DEVICE_LANGUAGE_SINHALESE = 65,
    S3E_DEVICE_LANGUAGE_SOMALI = 66,
    S3E_DEVICE_LANGUAGE_SWAHILI = 67,
    S3E_DEVICE_LANGUAGE_TAJIK = 68,
    S3E_DEVICE_LANGUAGE_TAMIL = 69,
    S3E_DEVICE_LANGUAGE_TELUGU = 70,
    S3E_DEVICE_LANGUAGE_TIBETAN = 71,
    S3E_DEVICE_LANGUAGE_TIGRINYA = 72,
    S3E_DEVICE_LANGUAGE_TURKMEN = 73,
    S3E_DEVICE_LANGUAGE_URDU = 74,
    S3E_DEVICE_LANGUAGE_UZBEK = 75,
    S3E_DEVICE_LANGUAGE_VIETNAMESE = 76,
    S3E_DEVICE_LANGUAGE_WELSH = 77,
    S3E_DEVICE_LANGUAGE_ZULU = 78
} s3eDeviceLanguage;
# 946 "e:/7.10/s3e/h/s3eDevice.h"
typedef enum s3eDeviceArchitecture
{
    S3E_DEVICE_ARCHITECTURE_UNKNOWN = -1,


    S3E_DEVICE_ARCHITECTURE_ARM4T = 0,
    S3E_DEVICE_ARCHITECTURE_ARM4 = 1,
    S3E_DEVICE_ARCHITECTURE_ARM5T = 2,
    S3E_DEVICE_ARCHITECTURE_ARM5TE = 3,
    S3E_DEVICE_ARCHITECTURE_ARM5TEJ = 4,
    S3E_DEVICE_ARCHITECTURE_ARM6 = 5,
    S3E_DEVICE_ARCHITECTURE_ARM6K = 6,
    S3E_DEVICE_ARCHITECTURE_ARM6T2 = 7,
    S3E_DEVICE_ARCHITECTURE_ARM6Z = 8,
    S3E_DEVICE_ARCHITECTURE_ARM7A = 12,
    S3E_DEVICE_ARCHITECTURE_ARM8A = 14,


    S3E_DEVICE_ARCHITECTURE_ARM8A_AARCH64 = 15,


    S3E_DEVICE_ARCHITECTURE_X86 = 9,
    S3E_DEVICE_ARCHITECTURE_X86_64 = 11,
    S3E_DEVICE_ARCHITECTURE_AMD64 = 11,
    S3E_DEVICE_ARCHITECTURE_NACLX86_64 = 16,


    S3E_DEVICE_ARCHITECTURE_MIPS = 13,


    S3E_DEVICE_ARCHITECTURE_PPC = 10,

    S3E_DEVICE_ARCHITECTURE_MAX = 17
} s3eDeviceArchitecture;
# 988 "e:/7.10/s3e/h/s3eDevice.h"
typedef enum s3eDeviceSoftKeyPosition
{
    S3E_DEVICE_SOFTKEY_BOTTOM_LEFT = 0,
    S3E_DEVICE_SOFTKEY_BOTTOM_RIGHT = 1,
    S3E_DEVICE_SOFTKEY_TOP_RIGHT = 2,
    S3E_DEVICE_SOFTKEY_TOP_LEFT = 3
} s3eDeviceSoftKeyPosition;
# 1029 "e:/7.10/s3e/h/s3eDevice.h"
extern "C" const char* s3eDeviceGetString(s3eDeviceProperty property);
# 1064 "e:/7.10/s3e/h/s3eDevice.h"
extern "C" int32 s3eDeviceGetInt(s3eDeviceProperty property);
# 1084 "e:/7.10/s3e/h/s3eDevice.h"
extern "C" s3eResult s3eDeviceSetInt(s3eDeviceProperty property, int32 value);
# 1112 "e:/7.10/s3e/h/s3eDevice.h"
extern "C" int64 s3eDeviceYield(int32 ms =0);
# 1134 "e:/7.10/s3e/h/s3eDevice.h"
extern "C" void s3eDeviceUnYield();
# 1162 "e:/7.10/s3e/h/s3eDevice.h"
extern "C" void s3eDeviceYieldUntilEvent(int32 ms =0x7fffffffL);
# 1197 "e:/7.10/s3e/h/s3eDevice.h"
extern "C" s3eResult s3eDeviceExecPushNext(const char* filename, const char* config_prepend =__null, const char* config_append =__null);
# 1213 "e:/7.10/s3e/h/s3eDevice.h"
extern "C" void s3eDeviceExit(int code =0) __attribute__ ((noreturn));






typedef enum s3eDeviceState
{




    S3E_DEVICE_STATE_PAUSED = 3,





    S3E_DEVICE_STATE_EXITING = 4,




    S3E_DEVICE_STATE_RUNNING = 5
} s3eDeviceState;
# 1250 "e:/7.10/s3e/h/s3eDevice.h"
typedef enum s3eDeviceCallback
{
# 1263 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_PAUSE = 0,
# 1275 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_UNPAUSE = 1,
# 1287 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_EXIT = 2,
# 1303 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_VOL_UP = 17,
# 1319 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_VOL_DOWN = 18,
# 1337 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_MAINS_POWER_CHANGED = 20,
# 1349 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_BACKGROUND = 22,
# 1361 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_FOREGROUND = 23,
# 1378 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_NETWORK_ONLINE = 24,
# 1395 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_NETWORK_OFFLINE = 25,
# 1411 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_SIMULATOR_RESTART = 26,
# 1428 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_APPLICATION_ACTIVE = 27,
# 1445 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_APPLICATION_INACTIVE = 28,
# 1462 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_APPLICATION_FULLSCREEN = 29,
# 1479 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_APPLICATION_THUMBNAIL = 30,
# 1496 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_APPLICATION_INVISIBLE = 31,
# 1514 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_OBSCURED = 32,
# 1532 "e:/7.10/s3e/h/s3eDevice.h"
    S3E_DEVICE_UNOBSCURED = 33,

    S3E_DEVICE_CALLBACK_MAX
} s3eDeviceCallback;
# 1553 "e:/7.10/s3e/h/s3eDevice.h"
typedef struct s3eDeviceVolChangeInfo
{





    s3eBool m_VolUp;
# 1578 "e:/7.10/s3e/h/s3eDevice.h"
    s3eBool m_OverrideDefaultBehaviour;
} s3eDeviceVolChangeInfo;





typedef struct s3eDeviceStateChangeInfo
{



    int32 m_State;
} s3eDeviceStateChangeInfo;
# 1613 "e:/7.10/s3e/h/s3eDevice.h"
extern "C" s3eResult s3eDeviceRegister(s3eDeviceCallback cbid, s3eCallback fn, void* userdata);
# 1633 "e:/7.10/s3e/h/s3eDevice.h"
extern "C" s3eResult s3eDeviceUnRegister(s3eDeviceCallback cbid, s3eCallback fn);
# 1648 "e:/7.10/s3e/h/s3eDevice.h"
extern "C" void s3eDeviceRequestQuit();
# 1659 "e:/7.10/s3e/h/s3eDevice.h"
extern "C" s3eBool s3eDeviceCheckQuitRequest();
# 1669 "e:/7.10/s3e/h/s3eDevice.h"
extern "C" s3eBool s3eDeviceCheckPauseRequest();
# 1687 "e:/7.10/s3e/h/s3eDevice.h"
extern "C" void s3eDeviceBacklightOn();


extern "C" s3eBool s3eDeviceNetworkCheckStart();


extern "C" s3eBool s3eDeviceNetworkCheckStop();


extern "C" void s3eDeviceLoaderCallStart(s3eBool lock, void* function);


extern "C" void s3eDeviceLoaderCallDone(s3eBool lock, void* function);


extern "C" void s3eDeviceAbort(void* pStack);
# 18 "e:/7.10/modules/iwutil/h/IwDebug.h" 2
# 1 "e:/7.10/modules/iwutil/h/IwCore.h" 1
# 19 "e:/7.10/modules/iwutil/h/IwDebug.h" 2


# 1 "e:/7.10/s3e/h/std/stdarg.h" 1
# 15 "e:/7.10/s3e/h/std/stdarg.h"
# 1 "e:/7.10/s3e/h/std/sys/types.h" 1
# 16 "e:/7.10/s3e/h/std/sys/types.h"
# 1 "e:/7.10/s3e/h/std/stddef.h" 1
# 17 "e:/7.10/s3e/h/std/stddef.h"
typedef signed long int ptrdiff_t;
# 29 "e:/7.10/s3e/h/std/stddef.h"
    typedef unsigned int wint_t;
    typedef unsigned long int wctype_t;
# 43 "e:/7.10/s3e/h/std/stddef.h"
typedef long unsigned int size_t;
# 17 "e:/7.10/s3e/h/std/sys/types.h" 2
# 1 "e:/7.10/s3e/h/std/stdint.h" 1
# 19 "e:/7.10/s3e/h/std/stdint.h"
typedef signed char int_least8_t;
typedef short int_least16_t;
typedef long int_least32_t;
typedef int64_t int_least64_t;

typedef unsigned char uint_least8_t;
typedef unsigned short uint_least16_t;
typedef unsigned long uint_least32_t;
typedef uint64_t uint_least64_t;

typedef signed char int_fast8_t;
typedef short int_fast16_t;
typedef long int_fast32_t;
typedef int64_t int_fast64_t;

typedef unsigned char uint_fast8_t;
typedef unsigned short uint_fast16_t;
typedef unsigned long uint_fast32_t;
typedef uint64_t uint_fast64_t;

typedef int64_t intmax_t;
typedef uint64_t uintmax_t;
# 18 "e:/7.10/s3e/h/std/sys/types.h" 2
# 1 "e:/7.10/s3e/h/std/sys/select.h" 1
# 24 "e:/7.10/s3e/h/std/sys/select.h"
struct timeval;

typedef struct fd_set
{
    char fds_bits[256/8];
} fd_set;
# 39 "e:/7.10/s3e/h/std/sys/select.h"
extern "C" {

int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);

}
# 19 "e:/7.10/s3e/h/std/sys/types.h" 2



typedef long off_t;

typedef int64_t off64_t;


namespace std
{
typedef ::size_t size_t;
}


typedef uint u_int;
typedef uint8_t u_int8_t;
typedef uint16_t u_int16_t;
typedef uint32_t u_int32_t;
typedef uint64_t u_int64_t;

typedef unsigned short u_short;
typedef unsigned long u_long;
typedef unsigned char u_char;


typedef long int ssize_t;



typedef int pid_t;
typedef short uid_t;
typedef short gid_t;
typedef int idtype_t;
typedef int id_t;
typedef uint32 mode_t;
typedef short dev_t;
typedef short ino_t;
typedef int key_t;
typedef void* caddr_t;
# 16 "e:/7.10/s3e/h/std/stdarg.h" 2
# 55 "e:/7.10/s3e/h/std/stdarg.h"
typedef __builtin_va_list va_list;
# 22 "e:/7.10/modules/iwutil/h/IwDebug.h" 2
# 1 "e:/7.10/s3e/h/std/stdio.h" 1
# 19 "e:/7.10/s3e/h/std/stdio.h"
struct __XXFILE;
typedef struct __XXFILE FILE;

typedef uint32 fpos_t;
# 38 "e:/7.10/s3e/h/std/stdio.h"
extern "C" {



struct _reent
{
  int _errno;
  void *_stdin, *_stdout, *_stderr;
};
extern struct _reent *_impure_ptr;
# 73 "e:/7.10/s3e/h/std/stdio.h"
FILE *fopen(const char *path, const char *mode);
int fclose(FILE *fp);
int fcloseall();
int fflush(FILE *stream);

FILE *fopen(const char *path, const char *mode);
FILE *fdopen(int fildes, const char *mode);
FILE *freopen(const char *path, const char *mode, FILE *stream);

size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream);

int fputc(int c, FILE *stream);
int fputs(const char *s, FILE *stream);
int putc(int c, FILE *stream);
int putchar(int c);
int puts(const char *s);

int fgetc(FILE *stream);
char *fgets(char *s, int size, FILE *stream);
int getc(FILE *stream);
int getchar(void);
char *gets(char *s);
int ungetc(int c, FILE *stream);

int fseek(FILE *stream, long offset, int whence);
long ftell(FILE *stream);
void rewind(FILE *stream);
int fgetpos(FILE *stream, fpos_t *pos);
int fsetpos(FILE *stream, fpos_t *pos);

void flockfile(FILE *filehandle);
int ftrylockfile(FILE *filehandle);
void funlockfile(FILE *filehandle);

int getc_unlocked(FILE *stream);
int getchar_unlocked(void);
int putc_unlocked(int c, FILE *stream);
int putchar_unlocked(int c);

FILE *popen(const char *command, const char *type);
int pclose(FILE *stream);

char *tempnam(const char *dir, const char *pfx);




int printf(const char *format, ...) __attribute__((format(printf, 1, 2)));



int fprintf(FILE *stream, const char* format, ...) __attribute__((format(printf, 2, 3)));



int sprintf(char *str, const char* format, ...) __attribute__((format(printf, 2, 3)));



int snprintf(char *str, size_t size, const char *format, ...) __attribute__((format(printf, 3, 4)));




int scanf(const char *format, ...);



int fscanf(FILE *stream, const char *format, ...);



int sscanf(const char *str, const char *format, ...);

void clearerr(FILE *stream);
int feof(FILE *stream);
int ferror(FILE *stream);
int fileno(FILE *stream);

int remove(const char *pathname);
int rename(const char *oldpath, const char *newpath);

void perror(const char *s);



FILE *tmpfile(void);
char *tmpnam(char *s);

void setbuf(FILE *stream, char *buf);
void setbuffer(FILE *stream, char *buf, size_t size);
void setlinebuf(FILE *stream);
int setvbuf(FILE *stream, char *buf, int mode , size_t size);



int vfprintf(FILE *stream, const char *format, va_list ap);
int vsprintf(char *str, const char *format, va_list ap);
int vsnprintf(char *str, size_t size, const char *format, va_list ap);
int vprintf(const char *format, va_list ap);
int asprintf(char **strp, const char *fmt, ...);
int vasprintf(char **strp, const char *fmt, va_list ap);

int vscanf(const char *format, va_list ap);
int vsscanf(const char *str, const char *format, va_list ap);
int vfscanf(FILE *stream, const char *format, va_list ap);

}
# 23 "e:/7.10/modules/iwutil/h/IwDebug.h" 2
# 1 "e:/7.10/s3e/h/std/stdlib.h" 1
# 16 "e:/7.10/s3e/h/std/stdlib.h"
# 1 "e:/7.10/s3e/h/std/malloc.h" 1
# 16 "e:/7.10/s3e/h/std/malloc.h"
# 1 "e:/7.10/s3e/h/std/alloca.h" 1
# 17 "e:/7.10/s3e/h/std/alloca.h"
extern "C" {
# 37 "e:/7.10/s3e/h/std/alloca.h"
}
# 17 "e:/7.10/s3e/h/std/malloc.h" 2

extern "C" {

void *calloc(size_t nmemb, size_t size);
void *malloc(size_t size);
void free(void *ptr);
void *realloc(void *ptr, size_t size);

}
# 17 "e:/7.10/s3e/h/std/stdlib.h" 2
# 28 "e:/7.10/s3e/h/std/stdlib.h"
extern "C" {

double atof(const char* string);
int atoi(const char *nptr);
long atol(const char *nptr);
int64_t atoll(const char *nptr);
int64_t atoq(const char *nptr);
int abs(int j);
long int labs(long int j);
int64_t llabs(int64_t j);
void qsort(void *base, size_t nmemb, size_t size, int(*compar)(const void *, const void *));
void *bsearch(const void *key, const void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *));
void abort(void) __attribute__ ((noreturn));
int putenv(char *string);
char *getenv(const char *name);
int setenv(const char *name, const char *value, int overwrite);
int unsetenv(const char *name);
void exit(int status) __attribute__ ((noreturn));
void _exit(int status) __attribute__ ((noreturn));
void _Exit(int status) __attribute__ ((noreturn));
unsigned long int strtoul(const char *nptr, char **endptr, int base);
uint64_t strtoull(const char *nptr, char **endptr, int base);
long int strtol(const char *nptr, char **endptr, int base);
int64_t strtoll(const char *nptr, char **endptr, int base);
double strtod(const char *nptr, char **endptr);
float strtof(const char *nptr, char **endptr);
long double strtold(const char *nptr, char **endptr);
int atexit(void (*function)(void));
int system(const char *command);
int posix_memalign(void **memptr, size_t alignment, size_t size);
char *mktemp(char *templ);
int mkstemp(char *templ);



int rand(void);
void srand(unsigned int seed);

long int random(void);
void srandom(unsigned int seed);

size_t __ctype_get_mb_cur_max();


int mblen(const char *s, size_t n);
int mbtowc(wchar_t *pwc, const char *s, size_t n);
int wctomb(char *s, wchar_t wc);
size_t mbstowcs(wchar_t *dest, const char *src, size_t n);
size_t wcstombs(char *dest, const wchar_t *src, size_t n);

typedef struct
{
    int quot;
    int rem;
} div_t;

typedef struct
{
    int quot;
    int rem;
} ldiv_t;

typedef struct
{
    int64_t quot;
    int64_t rem;
} lldiv_t;

div_t div(int numerator, int denominator);
ldiv_t ldiv(long numerator, long denominator);
lldiv_t lldiv(int64_t numerator, int64_t denominator);
# 118 "e:/7.10/s3e/h/std/stdlib.h"
}
# 24 "e:/7.10/modules/iwutil/h/IwDebug.h" 2
# 51 "e:/7.10/modules/iwutil/h/IwDebug.h"
typedef void(*IwAssertTextCallback)(char* pBuffer);

extern "C" {

typedef s3eErrorShowResult(*IwAssertCallback)(const char* channel, const char* pExpr, const char* pFilename, int32 line, const char* message);
typedef s3eErrorShowResult(*IwErrorCallback)(const char* message);
# 65 "e:/7.10/modules/iwutil/h/IwDebug.h"
 s3eBool IwDebugTraceIsChannelOn(const char* channel, s3eBool default_on);
# 74 "e:/7.10/modules/iwutil/h/IwDebug.h"
void IwDebugTraceDisable(s3eBool disable);




 void IwDebugTraceSetTraceChannel(const char* channel);
# 91 "e:/7.10/modules/iwutil/h/IwDebug.h"
 s3eBool IwDebugTraceChannelSwitch(const char* channel, s3eBool new_state);
# 101 "e:/7.10/modules/iwutil/h/IwDebug.h"
 void IwDebugTraceLinePrintf(const char* fmt, ...)

__attribute__((format(printf, 1, 2)))

;






 void IwDebugTraceLineVPrintf(const char* fmt, va_list args);


 void IwDebugAssertSetUID(uint32 n);







 s3eBool IwDebugAssertIsChannelOn(const char* channel);







 void IwDebugClearConfigCache();
# 141 "e:/7.10/modules/iwutil/h/IwDebug.h"
 void IwDebugAssertSetMessage(const char* fmt, ...)

__attribute__((format(printf, 1, 2)))

;
# 156 "e:/7.10/modules/iwutil/h/IwDebug.h"
 void IwDebugAssertSetSolution(const char* fmt, ...)

__attribute__((format(printf, 1, 2)))

;







 s3eErrorShowResult IwDebugAssertShow(const char* pExpr, const char* pFilename, int32 line, uint8 ignorable);






 IwAssertTextCallback IwAssertRegisterTextCallback(IwAssertTextCallback fn);






 IwAssertCallback IwAssertRegisterCallback(IwAssertCallback fn);
# 192 "e:/7.10/modules/iwutil/h/IwDebug.h"
 s3eErrorShowResult IwDebugErrorShow(const char* Args, ...)

__attribute__((format(printf, 1, 2)))

;






 IwErrorCallback IwDebugErrorRegisterCallback(IwErrorCallback fn);

}
# 345 "e:/7.10/modules/iwutil/h/IwDebug.h"
    static inline void IwDebugExit()
    {
        abort();
    }
# 579 "e:/7.10/modules/iwutil/h/IwDebug.h"
# 1 "e:/7.10/s3e/h/std/c++/typeinfo" 1
# 21 "e:/7.10/s3e/h/std/c++/typeinfo"
# 1 "e:/7.10/s3e/h/std/c++/stl/_prolog.h" 1
# 10 "e:/7.10/s3e/h/std/c++/stl/_prolog.h"
# 1 "e:/7.10/s3e/h/std/c++/stl/_config.h" 1
# 62 "e:/7.10/s3e/h/std/c++/stl/_config.h"
# 1 "e:/7.10/s3e/h/std/c++/stl_user_config.h" 1
# 63 "e:/7.10/s3e/h/std/c++/stl/_config.h" 2




# 1 "e:/7.10/s3e/h/std/c++/stl/_config_compat.h" 1
# 68 "e:/7.10/s3e/h/std/c++/stl/_config.h" 2



# 1 "e:/7.10/s3e/h/std/c++/stl/_site_config.h" 1
# 72 "e:/7.10/s3e/h/std/c++/stl/_config.h" 2


# 1 "e:/7.10/s3e/h/std/c++/config/stlcomp.h" 1
# 54 "e:/7.10/s3e/h/std/c++/config/stlcomp.h"
# 1 "e:/7.10/s3e/h/std/c++/config/stl_gcc_s3e.h" 1
# 67 "e:/7.10/s3e/h/std/c++/config/stl_gcc_s3e.h"
     typedef char __stl_char;
# 55 "e:/7.10/s3e/h/std/c++/config/stlcomp.h" 2
# 75 "e:/7.10/s3e/h/std/c++/stl/_config.h" 2
# 83 "e:/7.10/s3e/h/std/c++/stl/_config.h"
# 1 "e:/7.10/s3e/h/std/c++/config/stl_confix.h" 1
# 84 "e:/7.10/s3e/h/std/c++/stl/_config.h" 2
# 488 "e:/7.10/s3e/h/std/c++/stl/_config.h"
namespace std { }
namespace __std_alias = std;
# 546 "e:/7.10/s3e/h/std/c++/stl/_config.h"
namespace _STL { }

namespace stlport = _STL;
# 11 "e:/7.10/s3e/h/std/c++/stl/_prolog.h" 2





# 1 "e:/7.10/s3e/h/std/c++/config/_prolog.h" 1
# 17 "e:/7.10/s3e/h/std/c++/stl/_prolog.h" 2
# 22 "e:/7.10/s3e/h/std/c++/typeinfo" 2





# 1 "e:/7.10/s3e/h/std/c++/typeinfo.h" 1
# 20 "e:/7.10/s3e/h/std/c++/typeinfo.h"
# 1 "e:/7.10/s3e/h/std/c++/exception" 1
# 58 "e:/7.10/s3e/h/std/c++/exception"
# 1 "e:/7.10/s3e/h/ext/../std/c++/exception.h" 1
# 18 "e:/7.10/s3e/h/ext/../std/c++/exception.h"
# 1 "e:/7.10/s3e/h/std/c++/exception_gcc" 1
# 44 "e:/7.10/s3e/h/std/c++/exception_gcc"
extern "C++" {

namespace std
{
# 56 "e:/7.10/s3e/h/std/c++/exception_gcc"
  class exception
  {
  public:
    exception() throw() { }
    virtual ~exception() throw();


    virtual const char* what() const throw();
  };



  class bad_exception : public exception
  {
  public:
    bad_exception() throw() { }


    virtual ~bad_exception() throw();
  };


  typedef void (*terminate_handler) ();

  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) throw();


  void terminate() __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) throw();


  void unexpected() __attribute__ ((__noreturn__));
# 104 "e:/7.10/s3e/h/std/c++/exception_gcc"
  bool uncaught_exception() throw();
}

namespace __gnu_cxx
{
# 119 "e:/7.10/s3e/h/std/c++/exception_gcc"
  void __verbose_terminate_handler ();
}

}
# 19 "e:/7.10/s3e/h/ext/../std/c++/exception.h" 2
# 59 "e:/7.10/s3e/h/std/c++/exception" 2
# 75 "e:/7.10/s3e/h/std/c++/exception"
namespace _STL {


using __std_alias::exception;
using __std_alias::bad_exception;
# 106 "e:/7.10/s3e/h/std/c++/exception"
}
# 21 "e:/7.10/s3e/h/std/c++/typeinfo.h" 2
namespace std
{
    using _STL::exception;
}
# 1 "e:/7.10/s3e/h/std/c++/typeinfo_gcc" 1
# 39 "e:/7.10/s3e/h/std/c++/typeinfo_gcc"
# 1 "e:/7.10/s3e/h/std/c++/exception" 1
# 75 "e:/7.10/s3e/h/std/c++/exception"
namespace _STL {


using __std_alias::exception;
using __std_alias::bad_exception;
# 106 "e:/7.10/s3e/h/std/c++/exception"
}
# 40 "e:/7.10/s3e/h/std/c++/typeinfo_gcc" 2

#pragma GCC visibility push(default)

extern "C++" {

namespace __cxxabiv1
{
  class __class_type_info;
}
# 85 "e:/7.10/s3e/h/std/c++/typeinfo_gcc"
namespace std
{






  class type_info
  {
  public:




    virtual ~type_info();

  private:

    type_info& operator=(const type_info&);
    type_info(const type_info&);

  protected:
    const char *__name;

  protected:
    explicit type_info(const char *__n): __name(__n) { }

  public:



    const char* name() const;
# 133 "e:/7.10/s3e/h/std/c++/typeinfo_gcc"
    bool before(const type_info& __arg) const
    { return __name < __arg.__name; }
    bool operator==(const type_info& __arg) const
    { return __name == __arg.__name; }

    bool operator!=(const type_info& __arg) const
    { return !operator==(__arg); }


  public:
# 165 "e:/7.10/s3e/h/std/c++/typeinfo_gcc"
    virtual bool __is_pointer_p() const;

    virtual bool __is_function_p() const;







    virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,
       unsigned __outer) const;


    virtual bool __do_upcast(const __cxxabiv1::__class_type_info *__target,
        void **__obj_ptr) const;

  };






  class bad_cast : public exception
  {
  public:
    bad_cast() throw() { }


    virtual ~bad_cast() throw();

    virtual const char* what() const throw();
  };


  class bad_typeid : public exception
  {
  public:
    bad_typeid () throw() { }


    virtual ~bad_typeid() throw();

    virtual const char* what() const throw();
  };
}

#pragma GCC visibility pop

}
# 26 "e:/7.10/s3e/h/std/c++/typeinfo.h" 2
# 28 "e:/7.10/s3e/h/std/c++/typeinfo" 2
# 43 "e:/7.10/s3e/h/std/c++/typeinfo"
namespace _STL {



using __std_alias::type_info;



using __std_alias::bad_typeid;
# 61 "e:/7.10/s3e/h/std/c++/typeinfo"
using __std_alias::bad_cast;


}
# 78 "e:/7.10/s3e/h/std/c++/typeinfo"
# 1 "e:/7.10/s3e/h/std/c++/stl/_epilog.h" 1
# 10 "e:/7.10/s3e/h/std/c++/stl/_epilog.h"
# 1 "e:/7.10/s3e/h/std/c++/config/_epilog.h" 1
# 11 "e:/7.10/s3e/h/std/c++/stl/_epilog.h" 2



# 1 "e:/7.10/s3e/h/std/c++/stl/_config_compat_post.h" 1
# 15 "e:/7.10/s3e/h/std/c++/stl/_epilog.h" 2
# 79 "e:/7.10/s3e/h/std/c++/typeinfo" 2
# 580 "e:/7.10/modules/iwutil/h/IwDebug.h" 2


template <class _To, class _From>
_To IwSafeCast(_From from)
{

    if (from != __null && dynamic_cast<_To>(from) == __null)
        {
            const _STL::type_info& srctype = typeid(*from);
            const char* src = srctype.name();
            const char* target = typeid(_To).name();
            do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(false)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis == 0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Mis-casting pointer: 0x%p is a pointer to type '%s', which is not derived from '%s'", from, src, target); switch (IwDebugAssertShow("false",
 "e:/7.10/modules/iwutil/h/IwDebug.h"
# 591 "e:/7.10/modules/iwutil/h/IwDebug.h"
            ,
 592
# 591 "e:/7.10/modules/iwutil/h/IwDebug.h"
            , (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {} while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0)
                               ;
    }

    return static_cast <_To> (from);
}
# 8 "e:/7.10/extensions/pvrtextool/interface/PVRTexTool_interface.cpp" 2



# 1 "e:/7.10/extensions/pvrtextool/h/PVRTexTool.h" 1
# 36 "e:/7.10/extensions/pvrtextool/h/PVRTexTool.h"
struct PVRTexToolData {





    char m_Channels[4];




    unsigned char m_ChannelSizes[4];





    int m_Width;




    int m_Height;




    int m_MipMaps;





    unsigned int m_Sizes[12];




    unsigned char* m_Data[12];





    bool m_GenerateMips;




    unsigned int m_GLESFormat;
};

extern "C" {






s3eBool PVRTexToolAvailable();
# 105 "e:/7.10/extensions/pvrtextool/h/PVRTexTool.h"
PVRTexToolData* PVRTexToolConvert(PVRTexToolData* input);
# 114 "e:/7.10/extensions/pvrtextool/h/PVRTexTool.h"
void PVRTexToolFree(PVRTexToolData* data);


}
# 12 "e:/7.10/extensions/pvrtextool/interface/PVRTexTool_interface.cpp" 2
# 24 "e:/7.10/extensions/pvrtextool/interface/PVRTexTool_interface.cpp"
# 1 "e:/7.10/extensions/pvrtextool/interface/PVRTexTool_interface.h" 1







typedef PVRTexToolData*(*PVRTexToolConvert_t)(PVRTexToolData* input);
typedef void(*PVRTexToolFree_t)(PVRTexToolData* data);




typedef struct PVRTexToolFuncs
{
    PVRTexToolConvert_t m_PVRTexToolConvert;
    PVRTexToolFree_t m_PVRTexToolFree;
} PVRTexToolFuncs;
# 25 "e:/7.10/extensions/pvrtextool/interface/PVRTexTool_interface.cpp" 2

static PVRTexToolFuncs g_Ext;
static bool g_GotExt = false;
static bool g_TriedExt = false;
static bool g_TriedNoMsgExt = false;

static bool _extLoad()
{
    if (!g_GotExt && !g_TriedExt)
    {
        s3eResult res = s3eExtGetHash(0xb6b3ceac, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        else
            s3eDebugAssertShow(S3E_MESSAGE_CONTINUE_STOP_IGNORE, "error loading extension: PVRTexTool");

        g_TriedExt = true;
        g_TriedNoMsgExt = true;
    }

    return g_GotExt;
}

static bool _extLoadNoMsg()
{
    if (!g_GotExt && !g_TriedNoMsgExt)
    {
        s3eResult res = s3eExtGetHash(0xb6b3ceac, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        g_TriedNoMsgExt = true;
        if (g_TriedExt)
            g_TriedExt = true;
    }

    return g_GotExt;
}

s3eBool PVRTexToolAvailable()
{
    _extLoadNoMsg();
    return g_GotExt ? (1) : (0);
}

PVRTexToolData* PVRTexToolConvert(PVRTexToolData* input)
{
    do { if (IwDebugTraceIsChannelOn("PVRTEXTOOL_VERBOSE", 1)) { IwDebugTraceSetTraceChannel("PVRTEXTOOL_VERBOSE"); IwDebugTraceLinePrintf ("calling PVRTexTool[0] func: PVRTexToolConvert"); } } while(0);

    if (!_extLoad())
        return __null;





    PVRTexToolData* ret = g_Ext.m_PVRTexToolConvert(input);





    return ret;
}

void PVRTexToolFree(PVRTexToolData* data)
{
    do { if (IwDebugTraceIsChannelOn("PVRTEXTOOL_VERBOSE", 1)) { IwDebugTraceSetTraceChannel("PVRTEXTOOL_VERBOSE"); IwDebugTraceLinePrintf ("calling PVRTexTool[1] func: PVRTexToolFree"); } } while(0);

    if (!_extLoad())
        return;





    g_Ext.m_PVRTexToolFree(data);





    return;
}
